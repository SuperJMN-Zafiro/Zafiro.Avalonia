trigger:
    branches:
        include: [ master ]
pr:
    branches:
        include: [ master, "*" ]

pool:
    vmImage: ubuntu-latest

variables:
    - group: api-keys
    - name: DOTNET_CLI_TELEMETRY_OPTOUT
      value: '1'

steps:
    # Checkout completo + submódulos
    - checkout: self
      submodules: true
      fetchDepth: 0
    
    # Instalar workload Android de .NET
    - pwsh: |
        dotnet workload install maui-android
          dotnet workload list
      displayName: Install .NET Android workload
    
    # DotnetDeployer.Tool
    - pwsh: |
          dotnet tool install --global DotnetDeployer.Tool
          dotnetdeployer --version
      displayName: Install DotnetDeployer.Tool
    
    # Empaquetado + publicación NuGet + release GitHub (real en master, dry-run en el resto)
    - pwsh: |
          $branch   = '$(Build.SourceBranch)'
          $isMaster = $branch -eq 'refs/heads/master'
          Write-Host "Branch: $branch. Is master: $isMaster"
          
          if ($isMaster) {
            Write-Host 'Publishing NuGet packages'
            dotnetdeployer nuget --api-key '$(NuGetApiKey)'
          } else {
            Write-Host 'NuGet dry run (no push)'
            dotnetdeployer nuget --api-key '$(NuGetApiKey)' --no-push
          }
          
          $releaseArgs = @(
            'release',
            '--prefix','TestApp',
            '--token','$(GitHubAuthenticationToken)',
            '--android-keystore-base64','$(AndroidBase64Keystore)',
            '--android-key-alias','$(AndroidSigningKeyAlias)',
            '--android-key-pass','$(AndroidSigningKeyPass)',
            '--android-store-pass','$(AndroidSigningStorePass)'
          )
          
          if ($isMaster) {
            Write-Host 'Creating real release'
            dotnetdeployer @releaseArgs
          } else {
            Write-Host 'Creating release (dry run)'
            dotnetdeployer @releaseArgs --dry-run
          }
      displayName: Package, Publish and Release
