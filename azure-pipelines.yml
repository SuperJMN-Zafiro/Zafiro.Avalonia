variables:
- group: api-keys
- name: Agent.Source.Git.ShallowFetchDepth
  value: 0

steps:
- checkout: self
  submodules: true

# Optional: Ensure Android platform tools are available for any Android packaging steps
- script: /usr/local/lib/android/sdk/cmdline-tools/latest/bin/sdkmanager --sdk_root=/usr/local/lib/android/sdk "platform-tools"
  displayName: Install Android SDK "Platform Tools"
  continueOnError: true

# Install the DotnetPackaging Deployer tool
- pwsh: dotnet tool install --global DotnetPackaging.DeployerTool
  displayName: Install DotnetPackaging.DeployerTool
  
  # Package and Release: real on master, dry-run/no-push on other branches
- pwsh: |
    $isMaster = "$(Build.SourceBranch)" -eq "refs/heads/master"

    Write-Host "Branch: $(Build.SourceBranch). Is master: $isMaster"

    # NuGet publish (real on master, no-push otherwise)
    if ($isMaster) {
      Write-Host "Publishing NuGet packages"
      dotnetdeployer nuget --api-key $(NuGetApiKey)
    } else {
      Write-Host "NuGet dry run (no push)"
      dotnetdeployer nuget --api-key $(NuGetApiKey) --no-push
    }

    # Release (real on master, --dry-run otherwise)
    $releaseArgs = @(
      "release",
      "--prefix", "TestApp",
      "--token", "$(GitHubAuthenticationToken)",
      "--android-keystore-base64", "$(AndroidBase64Keystore)",
      "--android-key-alias", "$(AndroidSigningKeyAlias)",
      "--android-key-pass", "$(AndroidSigningKeyPass)",
      "--android-store-pass", "$(AndroidSigningStorePass)"
    )

    if ($isMaster) {
      Write-Host "Creating real release"
      dotnetdeployer @releaseArgs
    } else {
      Write-Host "Creating release (dry run)"
      dotnetdeployer @releaseArgs --dry-run
    }
  displayName: Package and Release (single step)
