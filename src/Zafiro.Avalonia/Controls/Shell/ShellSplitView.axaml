<Styles xmlns="https://github.com/avaloniaui"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:z="clr-namespace:Zafiro.Avalonia.Controls"
        xmlns:behaviors="clr-namespace:Zafiro.Avalonia.Behaviors"
        xmlns:shell="clr-namespace:Zafiro.Avalonia.Controls.Shell"
        xmlns:misc="clr-namespace:Zafiro.Avalonia.Misc"
        xmlns:p="https://github.com/projektanker/icons.avalonia">
    <Design.PreviewWith>
        <DockPanel>
            <DockPanel.Resources>
                <misc:EnumProvider x:Key="DisplayModesProvider"
                                   EnumType="{x:Type ShellSplitViewDisplayMode}" />
            </DockPanel.Resources>
            <StackPanel DockPanel.Dock="Top">
                <z:Card Header="Display Mode">
                    <ComboBox x:Name="DisplayModes"
                              x:CompileBindings="True"
                              SelectedValue="{Binding #ShellSplitView.DisplayMode}"
                              SelectedValueBinding="{Binding Value, DataType=misc:EnumItem}"
                              DisplayMemberBinding="{Binding Description, DataType=misc:EnumItem}"
                              ItemsSource="{Binding Source={StaticResource DisplayModesProvider}, Path=Enums}" />
                </z:Card>
            </StackPanel>

            <ShellSplitView
                x:Name="ShellSplitView"
                PaneHeader="Very long title, very long title"
                ContentHeader="HEADER"
                Background="AliceBlue"
                PaneBorderThickness="1"
                PaneBorderBrush="Black"
                DisplayMode="CompactInline" Width="500" Height="400">
                <ShellSplitView.PaneContent>
                    <Border BorderThickness="2">
                        <TextBlock VerticalAlignment="Center" TextAlignment="Center">This is the pane content</TextBlock>
                    </Border>
                </ShellSplitView.PaneContent>
                <Border Background="#CDFFFA">
                    <TextBlock TextAlignment="Center" VerticalAlignment="Center">This is the content</TextBlock>
                </Border>
            </ShellSplitView>
        </DockPanel>
    </Design.PreviewWith>
    <Styles.Resources>

        <SolidColorBrush x:Key="PaneBackground" Color="{DynamicResource SystemListLowColor}" />

        <ControlTheme x:Key="HamburguerMenuToggleButton" TargetType="ToggleButton" BasedOn="{StaticResource TransparentToggleButton}">
            <Setter Property="p:Attached.Icon" Value="mdi-menu" />
            <Setter Property="FontSize" Value="25" />
        </ControlTheme>

        <DataTemplate x:Key="ContentHeaderTemplate">
            <ContentControl
                TextElement.FontWeight="Bold"
                TextElement.FontSize="18"
                TextBlock.TextTrimming="CharacterEllipsis" Content="{Binding}" VerticalAlignment="Center" HorizontalAlignment="Center" />
        </DataTemplate>

        <DataTemplate x:Key="HeaderPaneTemplate">
            <ContentControl
                TextElement.FontWeight="Bold"
                TextBlock.TextTrimming="CharacterEllipsis" Content="{Binding}" VerticalAlignment="Center" HorizontalAlignment="Left" />
        </DataTemplate>

        <ControlTheme x:Key="{x:Type ShellSplitView}" TargetType="ShellSplitView">
            <!-- Default values -->
            <Setter Property="DisplayMode" Value="Overlay" />
            <Setter Property="ExpandButtonSize" Value="28" />
            <Setter Property="OpenPaneLength" Value="200" />
            <Setter Property="PaneBackground" Value="{StaticResource PaneBackground}" />
            <Setter Property="ToggleButtonTheme" Value="{StaticResource HamburguerMenuToggleButton}" />
            <Setter Property="ContentHeaderTemplate" Value="{StaticResource ContentHeaderTemplate}" />
            <Setter Property="PaneHeaderTemplate" Value="{StaticResource HeaderPaneTemplate}" />
            <Setter Property="ToggleButtonContent">
                <Template>
                    <p:Icon Value="mdi-menu" />
                </Template>
            </Setter>

            <Setter Property="Template">
                <ControlTemplate>
                    <!-- Main grid: Auto width for pane, * for content -->
                    <Border Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}">
                        <Grid ColumnDefinitions="Auto *" RowDefinitions="Auto *">

                            <!-- Content Header (top-right) -->
                            <ContentPresenter Grid.Row="0" Grid.Column="1" x:Name="ContentHeader"
                                              ContentTemplate="{TemplateBinding ContentHeaderTemplate}"
                                              Content="{TemplateBinding ContentHeader}"
                                              Height="{TemplateBinding ExpandButtonSize}" />

                            <!-- Main Content (bottom-right by default) -->
                            <TransitioningContentControl Grid.Row="1" Grid.Column="0" x:Name="Content"
                                                         PageTransition="{TemplateBinding PageTransition}"
                                                         ContentTemplate="{TemplateBinding ContentTemplate}"
                                                         Content="{TemplateBinding Content}" />

                            <!-- Pane Container (left side, spans both rows) -->
                            <Grid Grid.Row="0" Grid.RowSpan="2" Grid.Column="0" x:Name="PaneContainer"
                                  ColumnDefinitions="Auto *" RowDefinitions="Auto *">

                                <!-- Pane Background -->
                                <Border x:Name="PaneBackground" Grid.RowSpan="2"
                                        Background="{TemplateBinding PaneBackground}"
                                        BorderBrush="{TemplateBinding PaneBorderBrush}"
                                        BorderThickness="{TemplateBinding PaneBorderThickness}" />

                                <!-- Pane Content -->
                                <ContentPresenter x:Name="PaneRoot" Grid.Row="1" Grid.Column="0"
                                                  HorizontalAlignment="Left"
                                                  ContentTemplate="{TemplateBinding PaneContentTemplate}"
                                                  Content="{TemplateBinding PaneContent}" />

                                <!-- Header with toggle button -->
                                <DockPanel Grid.Row="0" Grid.Column="0" MaxWidth="{TemplateBinding OpenPaneLength}">
                                    <ToggleButton Theme="{TemplateBinding ToggleButtonTheme}"
                                                  Width="{TemplateBinding ExpandButtonSize}"
                                                  Height="{TemplateBinding ExpandButtonSize}"
                                                  Content="{TemplateBinding ToggleButtonContent}"
                                                  IsChecked="{TemplateBinding IsPaneOpen, Mode=TwoWay}" />
                                    <ContentPresenter x:Name="PaneHeader"
                                                      ContentTemplate="{TemplateBinding PaneHeaderTemplate}"
                                                      Content="{TemplateBinding PaneHeader}" />
                                </DockPanel>

                                <!-- Click outside behavior for overlay mode -->
                                <Interaction.Behaviors>
                                    <behaviors:PointerPressedOutsideTriggerBehavior
                                        IsEnabled="{Binding $parent[ShellSplitView].DisplayMode, Converter={x:Static shell:ShellConverters.IsOverlay}}">
                                        <behaviors:SetAvaloniaPropertyCurrentValueAction
                                            TargetObject="{Binding $parent[ShellSplitView]}"
                                            TargetProperty="{x:Static ShellSplitView.IsPaneOpenProperty}"
                                            Value="{x:False}" />
                                    </behaviors:PointerPressedOutsideTriggerBehavior>
                                </Interaction.Behaviors>
                            </Grid>
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter>

            <!-- Animations -->
            <Style Selector="^ /template/ :is(Control)#PaneHeader">
                <Setter Property="Transitions">
                    <Transitions>
                        <DoubleTransition Property="Opacity" Duration="0:0:0.5" />
                    </Transitions>
                </Setter>
            </Style>

            <Style Selector="^ /template/ :is(Control)#PaneRoot">
                <Setter Property="Transitions">
                    <Transitions>
                        <DoubleTransition Property="Width" Duration="0:0:0.1" />
                    </Transitions>
                </Setter>
            </Style>

            <Style Selector="^ /template/ :is(Control)#PaneBackground">
                <Setter Property="Transitions">
                    <Transitions>
                        <DoubleTransition Property="Width" Duration="0:0:0.1" />
                    </Transitions>
                </Setter>
            </Style>

            <!-- Pane closed states -->
            <Style Selector="^[IsPaneOpen=False] /template/ :is(Control)#PaneHeader">
                <Setter Property="Opacity" Value="0" />
                <Setter Property="Width" Value="0" />
            </Style>

            <!-- Pane open width -->
            <Style Selector="^[IsPaneOpen=True] /template/ :is(Control)#PaneRoot">
                <Setter Property="Width" Value="{TemplateBinding OpenPaneLength}" />
            </Style>

            <!-- CompactOverlay mode -->
            <Style Selector="^[IsPaneOpen=False][DisplayMode=CompactOverlay] /template/ :is(Control)#PaneRoot">
                <Setter Property="Width" Value="{TemplateBinding ExpandButtonSize}" />
            </Style>

            <!-- CompactInline mode -->
            <Style Selector="^[IsPaneOpen=False][DisplayMode=CompactInline] /template/ :is(Control)#PaneRoot">
                <Setter Property="Width" Value="{TemplateBinding ExpandButtonSize}" />
            </Style>

            <!-- Inline mode - content repositioning -->
            <Style Selector="^[DisplayMode=Inline] /template/ :is(Control)#Content">
                <Setter Property="Grid.Column" Value="0" />
                <Setter Property="Grid.Row" Value="1" />
                <Setter Property="Grid.ColumnSpan" Value="2" />
                <Setter Property="Grid.RowSpan" Value="2" />
            </Style>
            <Style Selector="^[DisplayMode=Inline][IsPaneOpen=False] /template/ :is(Control)#PaneRoot">
                <Setter Property="Width" Value="0" />
            </Style>
            <Style Selector="^[DisplayMode=Inline][IsPaneOpen=True] /template/ :is(Control)#Content">
                <Setter Property="Grid.Column" Value="1" />
                <Setter Property="Grid.Row" Value="1" />
            </Style>

            <!-- Overlay mode - content repositioning -->
            <Style Selector="^[DisplayMode=Overlay] /template/ :is(Control)#Content">
                <Setter Property="Grid.Column" Value="0" />
                <Setter Property="Grid.Row" Value="1" />
                <Setter Property="Grid.ColumnSpan" Value="2" />
            </Style>
            <Style Selector="^[DisplayMode=Overlay] /template/ :is(Control)#ContentHeader">
                <Setter Property="Grid.Column" Value="0" />
                <Setter Property="Grid.Row" Value="0" />
                <Setter Property="Grid.ColumnSpan" Value="2" />
            </Style>
            <Style Selector="^[DisplayMode=Overlay][IsPaneOpen=False] /template/ :is(Control)#PaneBackground">
                <Setter Property="Width" Value="0" />
            </Style>
            <Style Selector="^[DisplayMode=Overlay][IsPaneOpen=False] /template/ :is(Control)#PaneRoot">
                <Setter Property="Width" Value="0" />
            </Style>

            <!-- CompactOverlay mode - content repositioning -->
            <Style Selector="^[DisplayMode=CompactOverlay] /template/ :is(Control)#Content">
                <Setter Property="Grid.Column" Value="0" />
                <Setter Property="Grid.Row" Value="1" />
                <Setter Property="Grid.ColumnSpan" Value="2" />
            </Style>
            <Style Selector="^[DisplayMode=CompactOverlay] /template/ :is(Control)#ContentHeader">
                <Setter Property="Grid.Column" Value="0" />
                <Setter Property="Grid.Row" Value="0" />
                <Setter Property="Grid.ColumnSpan" Value="2" />
            </Style>

            <!-- CompactInline mode - content repositioning -->
            <Style Selector="^[DisplayMode=CompactInline] /template/ :is(Control)#Content">
                <Setter Property="Grid.Column" Value="1" />
                <Setter Property="Grid.Row" Value="1" />
                <Setter Property="Grid.ColumnSpan" Value="2" />
            </Style>
        </ControlTheme>
    </Styles.Resources>
</Styles>